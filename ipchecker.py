#!/usr/bin/python3
import os
import sys
import logging
import smtplib
import base64
from getpass import getpass
import pickle
from requests import get, post
from email.message import EmailMessage


def get_cwd():
    '''Returns working directory'''
    if os.name == 'nt':
        return os.path.dirname(os.path.realpath(__file__))
    os.chdir(os.path.dirname(os.path.abspath(sys.argv[0])))
    return os.getcwd()


logger = logging.getLogger('')
logger.setLevel(logging.INFO)
fh = logging.FileHandler(f'{get_cwd()}/ipchecker.log')
sh = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('[%(levelname)s]|%(asctime)s|%(message)s',
                               datefmt='%d %b %Y %H:%M:%S')
fh.setFormatter(formatter)
sh.setFormatter(formatter)
logger.addHandler(fh)
logger.addHandler(sh)


class User:
    def __init__(self):
        if os.path.isfile(f"{get_cwd()}/user.pickle"):
            self.load_user()
        else:
            self.gmail_address = input("What's your email address?: ")
            self.gmail_password = base64.b64encode(getpass("What's your email password?: ").encode("utf-8"))
            self.DNS_username = input("What's your autogenerated DNS username?: ")
            self.DNS_password = input("What's your autogenerated DNS password?: ")
            self.domain = input("What's your domain (and subdomain: @.example.com / subdomain.example.com)?: ")              
            self.req_url = f'https://{self.DNS_username}:{self.DNS_password}@domains.google.com/nic/update?hostname={self.domain}&myip='
            self.save_user()

    def send_notification(self, ip, type='success', error=None):
        '''Notifies user via email if IP change is made successfully or if API call fails.'''
        msg = EmailMessage()
        if type == 'success':
            msg.set_content(f'IP for {self.domain} has changed! New IP: {ip}')
            msg['Subject'] = 'IP CHANGED SUCCESSFULLY!'
        elif type == 'error':
            msg.set_content(f'IP for {self.domain} has changed but the API call failed ({error})! New IP: {ip}')
            msg['Subject'] = 'IP CHANGE FAILED!'
        msg['From'] = self.gmail_address
        msg['To'] = self.gmail_address
        try:
            server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
            server.ehlo()
            server.login(self.gmail_address, base64.b64decode(self.gmail_password).decode('utf-8'))
            server.send_message(msg)
            server.close()
        except Exception as e:
            logger.warning(f'Email notification not sent:{e}')

    def save_user(self):
        with open('user.pickle', 'wb') as pickle_file:
            pickle.dump(self, pickle_file)

    def load_user(self):
        with open('user.pickle', 'rb') as pickle_file:
            self.__dict__.update(pickle.load(pickle_file).__dict__)


class IpChanger:
    def __init__(self):
        self.current_ip = get('https://api.ipify.org').text
        self.user = User()
        self.first_run = False
        self.change = False
        self.check_ip()
        logger.info(f'Current IP: {self.current_ip}')

    def check_ip(self):
        '''Checks current external IP against the one saved locally, if such a record exists.'''
        if os.path.isfile(f"{get_cwd()}/ip.txt"):
            with open(f'{get_cwd()}/ip.txt', 'r') as rf:
                line = rf.readlines()
                if not line:
                    self.first_run = True
                    self.store_ip()
                elif line[0] == self.current_ip:
                    self.first_run = False
                    self.change = False
                else:
                    self.first_run = False
                    self.change = True
                    self.store_ip()
        else:
            self.first_run = True
            self.store_ip()


    def store_ip(self):
        '''Creates local record of IP or changes the stored IP depending on the outcome of self.check_ip()'''
        with open(f'{get_cwd()}/ip.txt', 'w') as wf:
            if self.first_run:
                logger.info('Recording first IP (no change to DNS)')
                wf.write(self.current_ip)
            elif self.change:
                logger.info('Changing IP address...')
                wf.write(self.current_ip)
                self.change_ip()

    def change_ip(self):
        '''Attempts to change the Dynamic DNS rules via the Google Domains API'''
        try:
            req = post(f'{self.user.req_url}{self.current_ip}')
            logger.info(f"Google Domains API response: {req.content.decode('utf-8')}")
            self.user.send_notification(self.current_ip)
        except Exception as e:
            logger.warning(f'API call failed: {e}')
            self.user.send_notification(self.current_ip, 'error', e)


if __name__ == "__main__":
    IpChanger()
